#pragma checksum "D:\Metin\Projects\DoctoranturaApp\Doctorantura.App\Views\Calculator\Calculate.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "85177f8ab0a618a973ef1a57d9d7c5a3f040d32d"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Calculator_Calculate), @"mvc.1.0.view", @"/Views/Calculator/Calculate.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "D:\Metin\Projects\DoctoranturaApp\Doctorantura.App\Views\_ViewImports.cshtml"
using Doctorantura.App;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\Metin\Projects\DoctoranturaApp\Doctorantura.App\Views\_ViewImports.cshtml"
using Doctorantura.App.Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 1 "D:\Metin\Projects\DoctoranturaApp\Doctorantura.App\Views\Calculator\Calculate.cshtml"
using Doctorantura.App.ViewModels;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"85177f8ab0a618a973ef1a57d9d7c5a3f040d32d", @"/Views/Calculator/Calculate.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"262781e40b287fab6373e69578f1b33d5a47c059", @"/Views/_ViewImports.cshtml")]
    #nullable restore
    public class Views_Calculator_Calculate : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<CalculateVM>
    #nullable disable
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#nullable restore
#line 3 "D:\Metin\Projects\DoctoranturaApp\Doctorantura.App\Views\Calculator\Calculate.cshtml"
  
    ViewData["Title"] = "Calculate";

#line default
#line hidden
#nullable disable
            WriteLiteral(@"<style>
    .setFull {
        width: 100%;
    }
</style>

<input id=""btn_add"" type=""button"" class=""col-12 btn btn-primary d-block mr-5"" value=""Sütun əlavə et"">

<div class=""row"">
    <div class=""col-10"">
        <table class=""table"">
            <thead id=""thead"">
                <tr class=""tr_head"">
                    <th scope=""col"">G</th>
");
#nullable restore
#line 20 "D:\Metin\Projects\DoctoranturaApp\Doctorantura.App\Views\Calculator\Calculate.cshtml"
                     foreach (var columnNum in @Model.ColumnLines.GroupBy(x => x.ColumnNum).Select(x => x.Key).ToList())
                    {

#line default
#line hidden
#nullable disable
            WriteLiteral("                        <th");
            BeginWriteAttribute("th_row", " th_row=\"", 614, "\"", 715, 1);
#nullable restore
#line 22 "D:\Metin\Projects\DoctoranturaApp\Doctorantura.App\Views\Calculator\Calculate.cshtml"
WriteAttributeValue("", 623, Model.ColumnLines.Where(x=>x.ColumnNum==columnNum).Select(x=>x.Column.Row).FirstOrDefault(), 623, 92, false);

#line default
#line hidden
#nullable disable
            EndWriteAttribute();
            WriteLiteral(" scope=\"col\">\n                            <input type=\"text\"");
            BeginWriteAttribute("value", " value=\"", 776, "\"", 876, 1);
#nullable restore
#line 23 "D:\Metin\Projects\DoctoranturaApp\Doctorantura.App\Views\Calculator\Calculate.cshtml"
WriteAttributeValue("", 784, Model.ColumnLines.Where(x=>x.ColumnId==columnNum).Select(x=>x.Column.Name).FirstOrDefault(), 784, 92, false);

#line default
#line hidden
#nullable disable
            EndWriteAttribute();
            WriteLiteral(" class=\"setFull font-weight-bold\">\n                        </th>\n");
#nullable restore
#line 25 "D:\Metin\Projects\DoctoranturaApp\Doctorantura.App\Views\Calculator\Calculate.cshtml"
                    }

#line default
#line hidden
#nullable disable
            WriteLiteral("                </tr>\n            </thead>\n\n            <tbody id=\"tbody\">\n");
#nullable restore
#line 30 "D:\Metin\Projects\DoctoranturaApp\Doctorantura.App\Views\Calculator\Calculate.cshtml"
                 foreach (var lineNum in @Model.ColumnLines.GroupBy(x => x.LineNum).Select(x => x.Key).ToList())
                {

#line default
#line hidden
#nullable disable
            WriteLiteral("                    <tr class=\"tr_tbody\">\n                        <td scope=\"col\">\n                            <input type=\"text\" disabled");
            BeginWriteAttribute("value", " value=\"", 1309, "\"", 1408, 1);
#nullable restore
#line 34 "D:\Metin\Projects\DoctoranturaApp\Doctorantura.App\Views\Calculator\Calculate.cshtml"
WriteAttributeValue("", 1317, Model.ColumnLines.Where(x=>x.ColumnNum==lineNum).Select(x=>x.Column.Name).FirstOrDefault(), 1317, 91, false);

#line default
#line hidden
#nullable disable
            EndWriteAttribute();
            WriteLiteral(" class=\"setFull font-weight-bold\">\n                        </td>\n");
#nullable restore
#line 36 "D:\Metin\Projects\DoctoranturaApp\Doctorantura.App\Views\Calculator\Calculate.cshtml"
                         foreach (var columnLine in @Model.ColumnLines.Where(x => x.LineNum == lineNum).OrderBy(x => x.Column.Row))
                        {
                            string disabled = "";

                            if (columnLine.Column.Row <= lineNum)
                                disabled = "disabled";


#line default
#line hidden
#nullable disable
            WriteLiteral("                            <td");
            BeginWriteAttribute("column", " column=\"", 1838, "\"", 1869, 1);
#nullable restore
#line 43 "D:\Metin\Projects\DoctoranturaApp\Doctorantura.App\Views\Calculator\Calculate.cshtml"
WriteAttributeValue("", 1847, columnLine.Column.Row, 1847, 22, false);

#line default
#line hidden
#nullable disable
            EndWriteAttribute();
            BeginWriteAttribute("line", " line=\"", 1870, "\"", 1897, 1);
#nullable restore
#line 43 "D:\Metin\Projects\DoctoranturaApp\Doctorantura.App\Views\Calculator\Calculate.cshtml"
WriteAttributeValue("", 1877, columnLine.Line.Row, 1877, 20, false);

#line default
#line hidden
#nullable disable
            EndWriteAttribute();
            WriteLiteral(">\n                                <input type=\"text\" ");
#nullable restore
#line 44 "D:\Metin\Projects\DoctoranturaApp\Doctorantura.App\Views\Calculator\Calculate.cshtml"
                                              Write(disabled);

#line default
#line hidden
#nullable disable
            WriteLiteral(" value=\"");
#nullable restore
#line 44 "D:\Metin\Projects\DoctoranturaApp\Doctorantura.App\Views\Calculator\Calculate.cshtml"
                                                               Write(columnLine.Value);

#line default
#line hidden
#nullable disable
            WriteLiteral("\" class=\"setFull\">\n                            </td>\n");
#nullable restore
#line 46 "D:\Metin\Projects\DoctoranturaApp\Doctorantura.App\Views\Calculator\Calculate.cshtml"
                        }

#line default
#line hidden
#nullable disable
            WriteLiteral("                    </tr>\n");
#nullable restore
#line 48 "D:\Metin\Projects\DoctoranturaApp\Doctorantura.App\Views\Calculator\Calculate.cshtml"
                }

#line default
#line hidden
#nullable disable
            WriteLiteral("\n            </tbody>\n        </table>\n    </div>\n    <div class=\"col-1\">\n        <table class=\"table\">\n            <thead id=\"thead_line_sum\">\n                <tr");
            BeginWriteAttribute("class", " class=\"", 2271, "\"", 2279, 0);
            EndWriteAttribute();
            WriteLiteral(">\n                    <th>\n                        <input type=\"text\" disabled value=\"D\" class=\"setFull font-weight-bold\">\n                    </th>\n                </tr>\n            </thead>\n\n            <tbody id=\"tbody_sum\">\n");
#nullable restore
#line 64 "D:\Metin\Projects\DoctoranturaApp\Doctorantura.App\Views\Calculator\Calculate.cshtml"
                 foreach (var lineNum in @Model.ColumnLines.GroupBy(x => x.LineNum).Select(x => x.Key).ToList())
                {

#line default
#line hidden
#nullable disable
            WriteLiteral("                    <tr class=\"tr_tbody_sum\">\n                        <td");
            BeginWriteAttribute("sumLine", " sumLine=", 2713, "", 2730, 1);
#nullable restore
#line 67 "D:\Metin\Projects\DoctoranturaApp\Doctorantura.App\Views\Calculator\Calculate.cshtml"
WriteAttributeValue("", 2722, lineNum, 2722, 8, false);

#line default
#line hidden
#nullable disable
            EndWriteAttribute();
            WriteLiteral(">\n                            <input type=\"text\" disabled");
            BeginWriteAttribute("value", " value=\"", 2787, "\"", 2878, 1);
#nullable restore
#line 68 "D:\Metin\Projects\DoctoranturaApp\Doctorantura.App\Views\Calculator\Calculate.cshtml"
WriteAttributeValue("", 2795, Model.LineSums.Where(x=>x.LineNum==lineNum).Select(x=>x.TotalSum).FirstOrDefault(), 2795, 83, false);

#line default
#line hidden
#nullable disable
            EndWriteAttribute();
            WriteLiteral(" class=\"setFull\">\n                        </td>\n                    </tr>\n");
#nullable restore
#line 71 "D:\Metin\Projects\DoctoranturaApp\Doctorantura.App\Views\Calculator\Calculate.cshtml"
                }

#line default
#line hidden
#nullable disable
            WriteLiteral("\n            </tbody>\n        </table>\n\n    </div>\n    <div class=\"col-1\">\n        <table class=\"table\">\n            <thead id=\"thead_line_w\">\n                <tr");
            BeginWriteAttribute("class", " class=\"", 3133, "\"", 3141, 0);
            EndWriteAttribute();
            WriteLiteral(">\n                    <th>\n                        <input type=\"text\" disabled value=\"W\" class=\"setFull font-weight-bold\">\n                    </th>\n                </tr>\n            </thead>\n\n            <tbody id=\"tbody_w\">\n");
#nullable restore
#line 88 "D:\Metin\Projects\DoctoranturaApp\Doctorantura.App\Views\Calculator\Calculate.cshtml"
                 foreach (var lineNum in @Model.ColumnLines.GroupBy(x => x.LineNum).Select(x => x.Key).ToList())
                {

#line default
#line hidden
#nullable disable
            WriteLiteral("                    <tr class=\"tr_tbody_w\">\n                        <td");
            BeginWriteAttribute("wLine", " wLine=\"", 3571, "\"", 3587, 1);
#nullable restore
#line 91 "D:\Metin\Projects\DoctoranturaApp\Doctorantura.App\Views\Calculator\Calculate.cshtml"
WriteAttributeValue("", 3579, lineNum, 3579, 8, false);

#line default
#line hidden
#nullable disable
            EndWriteAttribute();
            WriteLiteral(">\n                            <input type=\"text\" disabled");
            BeginWriteAttribute("value", " value=\"", 3645, "\"", 3731, 1);
#nullable restore
#line 92 "D:\Metin\Projects\DoctoranturaApp\Doctorantura.App\Views\Calculator\Calculate.cshtml"
WriteAttributeValue("", 3653, Model.WLines.Where(x=>x.LineNum==lineNum).Select(x=>x.Value).FirstOrDefault(), 3653, 78, false);

#line default
#line hidden
#nullable disable
            EndWriteAttribute();
            WriteLiteral(" class=\"setFull\">\n                        </td>\n                    </tr>\n");
#nullable restore
#line 95 "D:\Metin\Projects\DoctoranturaApp\Doctorantura.App\Views\Calculator\Calculate.cshtml"
                }

#line default
#line hidden
#nullable disable
            WriteLiteral(@"
            </tbody>
        </table>

    </div>
</div>

<div class=""col-2"">
</div>
<script>
    let btnAdd = document.getElementById(""btn_add"");
    let t_head = document.getElementById(""thead"");
    let t_body = document.getElementById(""tbody"");
    let tr_tbody = document.getElementsByClassName(""tr_tbody"");
    let tr_head = document.getElementsByClassName(""tr_head"");

    let tbody_sum = document.getElementById(""tbody_sum"");
    let tr_tbody_sum = document.getElementsByClassName(""tr_tbody_sum"");

    let tbody_w = document.getElementById(""tbody_w"");
    let tr_tbody_w = document.getElementsByClassName(""tr_tbody_w"");

    let maxColumn = ");
#nullable restore
#line 118 "D:\Metin\Projects\DoctoranturaApp\Doctorantura.App\Views\Calculator\Calculate.cshtml"
               Write(Model.ColumnLines.GroupBy(x => x.ColumnId).Select(x => x.Key).LastOrDefault());

#line default
#line hidden
#nullable disable
            WriteLiteral(";\n    let maxLine = ");
#nullable restore
#line 119 "D:\Metin\Projects\DoctoranturaApp\Doctorantura.App\Views\Calculator\Calculate.cshtml"
             Write(Model.ColumnLines.GroupBy(x => x.LineId).Select(x => x.Key).LastOrDefault());

#line default
#line hidden
#nullable disable
            WriteLiteral(@";


    setTimeout(lineNumChanged(), 2000)
    setTimeout(addLineName(), 2000);


    btnAdd.addEventListener(""click"", function () {
        createTable()
        addLineName();
        lineNumChanged();
        insertData(maxColumn)
        t_body.children[maxColumn - 1].firstElementChild.firstChild.value = t_head.firstElementChild.children[maxColumn].firstElementChild.value
    });

    function lineNumChanged() {
        let columnThis = 0;
        let lineThis = 0
        let val=0;
        for (let tr of tr_tbody) {
            for (let td of tr.children) {
                td.firstElementChild.addEventListener(""keyup"", function () {

                    columnThis = td.getAttribute(""column"");
                    lineThis = td.getAttribute(""line"");
                    let column_name = getColumnName(columnThis);
                    // console.log(""column:"" + columnThis + ""  line:"" + lineThis + ""   value:"" + td.firstElementChild.value + ""   column_name:"" + column_name)
                    calcLineValue(td,");
            WriteLiteral(@" columnThis, lineThis);
                    val = td.firstElementChild.value;
                    UpdateData(columnThis,lineThis,val);
                    //addDb(columnThis, lineThis, x.firstElementChild.value, column_name);

                });
            }
        }

    }

    function calcLineValue(td, columnThis, lineThis) {
        let totalLineSum = 0;
        let val = 0;
        for (let l of tr_tbody) {
            for (let i of l.children) {

                if (i.getAttribute(""line"") == columnThis && i.getAttribute(""column"") == lineThis) {
                    i.firstElementChild.value = 1 / td.firstElementChild.value;
                }

                if (i.getAttribute(""line"") == lineThis) {
                    totalLineSum += Number(i.firstElementChild.value);
                }
            }
        }


        console.log(""gfgfgg:"" + totalLineSum)
        calcLineSum(lineThis, totalLineSum);

        calcWLine();
    }

    function calcWLine(totalLineSum) {
        for (let line of tr_tbody");
            WriteLiteral(@"_w) {
            let wLine = line.firstElementChild.getAttribute(""wLine"");
            let totalLineSum = getTotalLineSum();
            let lineSum = getLineSumByLineNum(wLine);

            line.firstElementChild.firstElementChild.value = Number(lineSum) / Number(totalLineSum);
        }
    }


    function getTotalLineSum() {
        let total = 0;
        for (let line of tr_tbody_sum) {
            total += Number(line.firstElementChild.firstElementChild.value);
        }
        return total;
    }

    function getLineSumByLineNum(lineNum) {
        let val = 0;
        for (let line of tr_tbody_sum) {
            if (line.firstElementChild.getAttribute(""sumLine"") == lineNum) {
                val = line.firstElementChild.firstElementChild.value;
            }
        }

        return val;
    }

    function calcLineSum(lineNum, val) {
        for (let line of tr_tbody_sum) {
            if (line.firstElementChild.getAttribute(""sumLine"") == lineNum) {
                console.log(line.firstElementCh");
            WriteLiteral(@"ild)
                line.firstElementChild.firstElementChild.value = Number(val);
            }
        }
    }

    function getColumnName(columnThis) {
        let colName = """";
        for (let n of tr_head[0].children) {
            if (n.getAttribute(""th_row"") == columnThis) {
                colName = n.firstElementChild.value
            }
        }
        return colName;
    }

    ///////-=---------------------------==================----------------------==============-


    function createTable() {

        maxColumn++;
        maxLine++;
        createTh();
        createTBodyTr();
        createTrSum();
        createTrW();

        for (let f of t_body.lastElementChild.children) {
            if (maxColumn > 1 && maxLine > 1)
                f.firstElementChild.setAttribute(""disabled"", """");
        }

        t_body.lastElementChild.lastElementChild.firstElementChild.value = 1;

        for (let f of t_body.children) {
            f.firstElementChild.firstElementChild.setAttribute(""disabled"",");
            WriteLiteral(@" """")
        }
    }


    function addLineName() {
        for (let f = 0; f < t_head.firstElementChild.children.length; f++) {
            t_head.firstElementChild.children[f].addEventListener(""keyup"", function () {
                let colName = t_head.firstElementChild.children[f].firstElementChild.value;
                let colNum = t_head.firstElementChild.children[f].getAttribute(""th_row"");
                t_body.children[f - 1].firstElementChild.firstElementChild.value = colName;

                updateColumnName(colNum, colName);
            });
        }
    }



    //---------W line -------------------


    function createTrW() {
        let inputW = document.createElement(""input"");
        inputW.classList.add(""setFull"");
        inputW.setAttribute(""disabled"", """")
        inputW.value = 1;

        let tdW = document.createElement(""td"");
        tdW.setAttribute(""WLine"", maxLine)
        tdW.appendChild(inputW);

        let trW = document.createElement(""tr"");
        trW.appendChild(tdW);
     ");
            WriteLiteral(@"   trW.classList.add(""tr_tbody_w"");

        tbody_w.appendChild(trW);
    }

    //---------line Sum -------------------

    function createTrSum() {
        let inputSum = document.createElement(""input"");
        inputSum.classList.add(""setFull"");
        inputSum.setAttribute(""disabled"", """")
        inputSum.value = 1;

        let tdSum = document.createElement(""td"");
        tdSum.setAttribute(""sumLine"", maxLine)
        tdSum.appendChild(inputSum);

        let trSum = document.createElement(""tr"");
        trSum.appendChild(tdSum);
        trSum.classList.add(""tr_tbody_sum"");

        tbody_sum.appendChild(trSum);
    }


    //base line--------------------

    function createTBodyTr() {
        let tBody_tr = document.createElement(""tr"");
        tBody_tr.classList.add(""tr_tbody"");

        for (let i = 0; i < tr_tbody.length + 2; i++) {
            let td = createTd(i, maxLine);
            tBody_tr.appendChild(td);
        }

        t_body.appendChild(tBody_tr);

    }

    function createTd(colum");
            WriteLiteral(@"n, line) {
        let td_input = document.createElement(""input"");
        td_input.value = 0;
        td_input.classList.add(""setFull"")

        let td = document.createElement(""td"");

        if (column > 0 && line > 0) {
            td.setAttribute(""column"", column);
            td.setAttribute(""line"", line);
        }

        td.appendChild(td_input);
        return td;
    }

    function createTh() {
        let th_input = document.createElement(""input"");
        th_input.value = ""Z"";
        th_input.classList.add(""setFull"")

        let th = document.createElement(""th"");
        th.setAttribute(""th_row"", maxColumn);

        th.appendChild(th_input);
        t_head.firstElementChild.appendChild(th);

        for (let i = 0; i < tr_head.length; i++) {

            for (let f = 0; f < t_body.children.length; f++) {
                let line = f + 1;
                let td = createTd(maxColumn, line);
                t_body.children[f].appendChild(td)
            }
        }
    }


    function UpdateDa");
            WriteLiteral(@"ta(column, line, val) {
        $.ajax({
            url: ""/Calculator/UpdateData"",
            method: ""POST"",
            data: { columnNo: column, lineNo: line, val: val },
            success: function (res) {
                console.log(res.response);
            },
            error: function (res) {
                console.log(res.response);
            }
        });
    }

    function updateColumnName(columnNum, columnName) {
        $.ajax({
            url: ""/Calculator/UpdateColumnName"",
            method: ""POST"",
            data: { columnNum: columnNum, columnName: columnName },
            success: function (res) {
                console.log(res.response);
            },
            error: function (res) {
                console.log(res.response);
            }
        });
    }

    function insertData(columnNum) {
        $.ajax({
            url: ""/Calculator/InsertData"",
            method: ""POST"",
            data: { columnNum: columnNum },
            success: function (res) {
        ");
            WriteLiteral("        console.log(res.response);\n            },\n            error: function (res) {\n                console.log(res.response);\n            }\n        });\n    }\n</script>");
        }
        #pragma warning restore 1998
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<CalculateVM> Html { get; private set; } = default!;
        #nullable disable
    }
}
#pragma warning restore 1591
